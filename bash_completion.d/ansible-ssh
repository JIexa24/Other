_ansible-ssh()
{
  for program in ansible-config ansible-inventory jq; do
    type "$program" > /dev/null || { echo "ERROR: not found: $program"; return 0; }
  done

  local current prev command
  current=${COMP_WORDS[COMP_CWORD]}
  prev=${COMP_WORDS[COMP_CWORD-1]}
  pprev=${COMP_WORDS[COMP_CWORD-2]} 
  command=${COMP_WORDS[1]}
  subcommand=${COMP_WORDS[2]}
  # echo
  # echo '-----'
  # echo "current $current"
  # echo "prev $prev"
  # echo "pprev $pprev"
  # echo "command $command"
  # echo "subcommand $subcommand"
  # echo "COMP_WORDS ${#COMP_WORDS[@]}"
  # echo '-----'
  # echo
  case $prev in
    ansible-ssh)
      # Inventory file wasn.t specified.
      if [ ${#COMP_WORDS[@]} = 2 ]; then
        COMPREPLY=($(ansible-inventory --list 2>/dev/null | jq --raw-output '.[] | .hosts? | .[]? ' | sort | uniq | grep -E "^$current"))
        return 0
      fi
      ;;
    *)
      case $command in
        -i)
          case ${#COMP_WORDS[@]} in
          # Inventory file was specified.
          3|4)
            if [ ! -z $prev ]; then
              COMPREPLY=($(ansible-inventory -i $subcommand --list 2>/dev/null | jq --raw-output '.[] | .hosts? | .[]? ' | sort | uniq | grep -E "^$current"))
              return 0
            fi
            ;;
          esac
          ;;
      esac
      ;;
  esac
}
complete -F _ansible-ssh ansible-ssh

# wrap_alias takes three arguments:
# $1: The name of the alias
# $2: The command used in the alias
# $3: The arguments in the alias all in one string
# Generate a wrapper completion function (completer) for an alias
# based on the command and the given arguments, if there is a
# completer for the command, and set the wrapper as the completer for
# the alias.
function wrap_alias() {
  [[ "$#" == 3 ]] || return 1

  local alias_name="$1"
  local aliased_command="$2"
  local alias_arguments="$3"
  local num_alias_arguments=$(echo "$alias_arguments" | wc -w)

  # The completion currently being used for the aliased command.
  local completion=$(complete -p $aliased_command 2> /dev/null)

  # Only a completer based on a function can be wrapped so look for -F
  # in the current completion. This check will also catch commands
  # with no completer for which $completion will be empty.
  echo $completion | grep -q -- -F || return 0

  local namespace=alias_completion::

  # Extract the name of the completion function from a string that
  # looks like: something -F function_name something
  # First strip the beginning of the string up to the function name by
  # removing "* -F " from the front.
  local completion_function=${completion##* -F }
  # Then strip " *" from the end, leaving only the function name.
  completion_function=${completion_function%% *}

  # Try to prevent an infinite loop by not wrapping a function
  # generated by this function. This can happen when the user runs
  # this twice for an alias like ls='ls --color=auto' or alias l='ls'
  # and alias ls='l foo'
  [[ "${completion_function#$namespace}" != $completion_function ]] && return 0

  local wrapper_name="${namespace}${alias_name}"

  eval "
function ${wrapper_name}() {
  let COMP_CWORD+=$num_alias_arguments
  args=( \"${alias_arguments}\" )
  COMP_WORDS=( $aliased_command \${args[@]} \${COMP_WORDS[@]:1} )
  $completion_function
  }
"

  # To create the new completion we use the old one with two
  # replacements:
  # 1) Replace the function with the wrapper.
  local new_completion=${completion/-F * /-F $wrapper_name }
  # 2) Replace the command being completed with the alias.
  new_completion="${new_completion% *} $alias_name"

  eval "$new_completion"
}

# For each defined alias, extract the necessary elements and use them
# to call wrap_alias.
eval "$(alias -p | grep ansible-ssh | sed -e 's/alias \([^=][^=]*\)='\''\([^ ][^ ]*\) *\(.*\)'\''/wrap_alias \1 \2 '\''\3'\'' /')"

unset wrap_alias
